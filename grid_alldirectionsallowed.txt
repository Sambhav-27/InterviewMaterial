// shortest path to last cell with all direcns allowed

#include <bits/stdc++.h>
using namespace std;
#define N 100
#define INF 100000000
int n;
bool visited[N][N];
bool issafe(int x, int y){
    if(x>=0 && y>=0 && x<n && y<n)
    return (!visited[x][y]);
    return 0;
}
struct pii{
    int x,y,w;
    pii(){}
    pii(int a, int b, int c): x(a), y(b), w(c){}
};
struct comp{
    bool operator()(const pii &a, const pii &b){
        return a.w>b.w;
    }
};
priority_queue<pii, vector< pii >, comp> q;
int main() {
	int t,i,j,k,cell[N][N];
	cin>>t;
	while(t--){
	    cin>>n;
	    for(i=0;i<n;++i)
	    for(j=0;j<n;++j)
	    cin>>cell[i][j];
	    
	    
	    int ans[N][N]; // don't declare it as bool
	    for(i=0;i<n;++i){
	        for(j=0;j<n;++j){
	            ans[i][j]=INF;
	            visited[i][j]=0;
	        }
	    }
	    ans[0][0]=cell[0][0]; // notice this
	    q.push(pii(0,0,ans[0][0]));
	    while(!q.empty()){
	        pii p=q.top(); q.pop();
	        int a=p.x, b=p.y;
	        
	        if(visited[a][b]) continue;
	        
	        int dir[4][2]={1,0, -1,0, 0,1, 0,-1};
	        
	        for(int i=0;i<4;++i){
	            int u= a+dir[i][0];
	            int v= b+dir[i][1];
	            if(!issafe(u,v)) continue;
	            int c=cell[u][v]; // here
	            if(issafe(u, v) && ans[u][v] > ans[a][b]+c){
	                ans[u][v]=ans[a][b]+c;
	                q.push(pii(u,v,ans[u][v]));
	            }
	        }
	       
	        visited[a][b]=1;
	    }
	   // for(i=0;i<n;++i){
	   //     for(j=0;j<n;++j){
	   //         cout<<ans[i][j]<<" ";
	   //     }
	   //     cout<<"\n";
	   // }
	    cout<<ans[n-1][n-1]<<"\n";
	}
	return 0;
}
