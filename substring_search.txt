#include<bits/stdc++.h>
using namespace std;


int main(){
	int i,j,k,t,n,m;
	cin>>t;
	while(t--){
	    string s,p;
	    cin>>s>>p;
	    n=s.length();
	    m=p.length();
	    
	   // print all occurrence of pattern in text(all starting index)
	   // assuming occurrences don't overlap
	   // int ans,pos;
	   // pos=0;
	   // while(1){
	   //     ans= s.find(p, pos);
	   //     if(ans== -1) break;
	        
	   //     cout<<ans<<" ";
	   //     pos= ans+m;
	   // }
	   // cout<<"\n";
	    
	  
	    // print last occurrence of a pat in string 
	   reverse(s.begin(), s.end());
	   reverse(p.begin(), p.end());
	   
	   int x= s.find(p, 0); // 0 is where to start matching
	   
	    if(x==-1)
	    cout<<x<<"\n";
	    else
	    cout<<n-m-x+1<<"\n"; // +1 for 1 based indexing
	    
	}
	return 0;
}


////
// kmp
// // for patt= abcaabcx; temp= 0 0 0 1 1 2 3 0
#include<bits/stdc++.h>
using namespace std;
#define N 100005
int temp[N];
void compute(string p, int m){
    int i,j;
    temp[0]=0;
    j=0;
    for(i=1; i<m; ){
        if(p[i]==p[j]){
            temp[i]= j+1;
            i++; j++;
        }
        else{
            if(j==0){
                temp[i]=0; i++;
            }
            else
            j=temp[j-1];
        }
    }
}
int find(string s, string p){
    int i,j,k,n,m;
    n=s.length();
    m=p.length();
    compute(p, m);
    
    i=j=0;
    while(i<n && j<m){
        if(s[i]==p[j]){
            i++; j++;
        }
        else{
            if(j==0) i++; // if first char of pat is not matched, compare with next of text
            else
            j= temp[j-1]; // start next matching after the prefix
        }
    }
    // to return first occurrence
    if(j== m)
    return i-m;
    
    return -1;
}

int main(){
	int i,j,k,t,n,m;
	cin>>t;
	while(t--){
	    string s,p;
	    cin>>s>>p;
	    
	    cout<<find(s, p)<<"\n";
	    
	}
	return 0;
}



///////////////////////
for all occurrences
int find(string s, string p){
    int i,j,k,n,m;
    n=s.length();
    m=p.length();
    compute(p, m);
    
    int ans=-1;
    i=j=0;
    while(i<n){
        if(j==m){
            ans=i-j;
            cout<<ans<<" ";
            j=temp[j-1];
        }
        if(s[i]==p[j]){
            i++; j++;
        }
        else{
            if(j==0) i++; // if first char of pat is not matched, compare with next of text
            else
            j= temp[j-1]; // start next matching after the prefix
        }
    }
    if(j==m){
        ans=i-j;
        cout<<ans;
    }
    
    return ans;
}


