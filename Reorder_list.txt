

// alternative sol: using slow and fast ptr reach till middle of list, divide them, reverse the second and merge alternately

//http://www.geeksforgeeks.org/rearrange-a-given-linked-list-in-place/


Node *cur;
bool flag=0;
bool flag2=0;
void find(Node *h){
    if(!h) return;  // notice this
    
    find(h->next);
    
    if(!flag && (cur==h || cur->next==h)){ // do this just once for middle node/s
        h->next=NULL;
        flag=1;
    }
    
    if(!flag){  // don't do after half part
        h->next=cur->next;
        cur->next=h;
        cur=cur->next->next;
    }
    
}
void reorderList(Node* head) 
{
    if(!head || !head->next) return;
    cur=head;
    flag=flag2=0;
    find(head);
}