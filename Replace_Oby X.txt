//http://www.geeksforgeeks.org/given-matrix-o-x-replace-o-x-surrounded-x/

// replace all connected parts of O by X except any part where any of O is on boundary
// steps: replace all O by -
// dfs through - present on boundaries to change all - to O
// dfs through rest of - to change them to X
// use a 2d array of char not a string



#include<bits/stdc++.h>
using namespace std;
#define N 1000
bool visited[N][N];
int dir[4][2]={1,0, 0,1, -1,0, 0,-1};
//string s[N];
char s[20][20];
int n,m;
bool issafe(int x, int y){
    if(x>=0 && y>=0  && x<n && y<m && !visited[x][y])
    return 1;
    return 0;
}
void dfs(int x, int y){
    visited[x][y]=1;
    
    s[x][y]='O';
    
    for(int i=0; i<4; ++i){
        int u= x+dir[i][0];
        int v= y+dir[i][1];
        if( issafe(u,v) && s[u][v]=='-')
        dfs(u,v);
    }
}
void dfs2(int x, int y){
    visited[x][y]=1;
    s[x][y]='X';
    
    for(int i=0; i<4; ++i){
        int u= x+dir[i][0];
        int v= y+dir[i][1];
        if(issafe(u,v) && s[u][v]=='-')
        dfs2(u,v);
    }
}
int main()
{
	int i,j,k,t;
	cin>>t;
	while(t--){
	    cin>>n>>m;
	    for(i=0;i<n;++i){
	        for(j=0;j<m;++j)
	        visited[i][j]=0;
	        
	    }
	    for(i=0;i<n;++i){
	        for(j=0; j<m; ++j){
	            char ch;
	            cin>>ch;
	            if(ch=='O')
	            ch='-';
	            s[i][j]=ch;
	            
	        }
	    }
	     for(i=0;i<n;++i){
	        for(j=0;j<m;++j)
	        visited[i][j]=0;
	    }
	    
	   
	    for(i=0;i<m;++i){
	        if(s[0][i]=='-' )
	        dfs(0, i);
	        if(s[n-1][i]=='-' )
	        dfs(n-1, i);
	    }
	   
	    for(i=0;i<n;++i){
	        if(s[i][0]=='-' )
	        dfs(i, 0);
	        if(s[i][m-1]=='-')
	        dfs(i, m-1);
	    }

         for(i=0;i<n;++i){
	        for(j=0;j<m;++j)
	        visited[i][j]=0;
	    }
	    
	    
	    for(i=0;i<n;++i){
	        for(j=0; j<m; ++j){
	            if(s[i][j]=='-' && !visited[i][j]){
	                dfs2(i,j);
	            }
	        }
	    }
	    
	    for(i=0;i<n;++i)
	    for(j=0;j<m;++j)
	    cout<<s[i][j]<<" ";
	    cout<<"\n";
	    
	    
	    
	    
	}
	return 0;
}
