/*
  reverse alternate nodes and append at the end
  The input list will have at least one element  
  Node is defined as 
  struct node
  {
     int data;
     struct node *next;
  }

*/
node *temp;
void reverse(node *head){
    if(!head->next){
        temp=head; return;
    }
    reverse(head->next);
    head->next->next=head;
    head->next=NULL;
}
void rearrange(struct node *head)
{
    if(!head || !head->next) return;
    node *head1, *head2, *cur1, *cur2, *cur;
    head1=cur1=head;  // cur1 and cur2 has to be assigned to something to use cur1->next. because cur alone is just a ptr, it doesn't have next.
    head2=cur2=head->next;
    int i=0;
    cur=head->next->next;
    while(cur){
        if(i%2==0){
            cur1->next=cur;
            cur1=cur1->next;
        }
        else{
            cur2->next=cur;
            cur2=cur2->next;
        }
        cur=cur->next;
        i++;
    }
    cur1->next=cur2->next=NULL;
    /// segregation part over
    
    reverse(head2);
    head2=temp;
    cur1->next=head2;
       
}
