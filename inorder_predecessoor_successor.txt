// http://www.geeksforgeeks.org/inorder-predecessor-successor-given-key-bst/
// key might not be present in tree
// suc is leftmost in right subtree i.e. min in right subtree
// pre is rightmost in left subtree
// nice
Node* getsuc(Node *root){
    if(!root) return NULL;
    while(root->left)
    root=root->left;
    return root;
}
Node *getpre(Node *root){
    if(!root) return NULL;
    while(root->right)
    root=root->right;
    return root;
}
void findPreSuc(Node* root, Node*& pre, Node*& suc, int k) // notice pass by reference
{
    if(!root) return;
    
    if(root->key==k){
        if(root->right) // don't remove this if otherwise it might set to NULL and we don't want tha
        suc= getsuc(root->right);
        
        if(root->left)
        pre= getpre(root->left);
        return;
    }
    else if(root->key > k){
        suc=root;
        findPreSuc(root->left, pre, suc, k);
    }
    else{
        pre=root;
        findPreSuc(root->right, pre, suc, k);
    }
}