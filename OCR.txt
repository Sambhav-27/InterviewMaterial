#include <bits/stdc++.h>
#define pii pair<int, int>
#define f first
#define s second
#define N 15
using namespace std;
// finding top_left and bottom_right
// if cur.y is minimum of y so far{
// then top_left.x= min(top_left.x, cur.x)
// minimum ysofar= cur.y
// }
// similarly for bottom right
// actually dfs was used to  find connected portion(find top_left and bootom_right) and ignore the rest of empty space then 
// convert to 28*28 image
// if dfs says two components then merge them but if they are actually two then will give wrong output. refer email



void fun(vector<int> &h, vector<int> &w){
    int i,j,k;
    for(i=0;i<h.size();++i){
        for(j=0;j<w.size();++j){
            cout<<h[i]<<":"<<w[j]<<"  ";
            // now crop this submatrix of h[i], w[j]
            // starting x index= w*j
            // starting y index= h*i
            //then apply dfs in submatrix of height h[i] and width w[j]
            // to find total connected components
            // if like in 'i' the x(top_left)==x(bootom_right) then two components are of same
            // letter else different letter
            // how to find top_left and bottom_right
        }
    }
}
int main() {
	bool a[N][N];
	int i,j,k,n,m;
	cin>>n>>m;
	for(i=0;i<n;++i){
	    for(j=0;j<m;++j)
	    cin>>a[i][j];
	}
	int row[N]={0};
	int col[N]={0};
	
	for(i=0;i<n;++i){
	    for(j=0;j<m;++j){
	        if(a[i][j]){
	            row[i]++;
	            col[j]++; //break;
	        }
	    }
	}
	for(i=0;i<n;++i){ // removing noise, any char will be just more than 1 pixel
	    if(row[i]<2)
	    row[i]=0;
	    else
	    row[i]=1;
	}
	for(j=0;j<m;++j){
	    if(col[j]<2)
	    col[j]=0;
	    else
	    col[j]=1;
	}
    vector<int> heights;
    vector<int> widths;
    // later on it will be converted to a 28*28 image
    // see 1 or 2 function of open cv
    // data set is in the form of np array
	// then dfs to check all connected components
	
	int eps=0; // threshold for ht width
	int loc=-1, h=0;
	for(i=0;i<n;++i){
	    if(row[i]==0 && loc!=-1 && row[i-1]==1){
	        if(h>eps)
	        heights.push_back(h);
	        h=0;
	    }
	    else if(row[i]==1){
	        loc=i;
	        h++;
	    }
	}
	if(h>eps)
	heights.push_back(h); // don't forget this
	
    loc=-1; int w=0;
	for(i=0;i<n;++i){
	    if(col[i]==0 && loc!=-1 && col[i-1]==1){
	        if(w>eps)
	        widths.push_back(w);
	        w=0;
	    }
	    else if(col[i]==1){
	        loc=i;
	        w++;
	    }
	}
	if(w>eps)
	widths.push_back(w); // don't forget this
	
	fun(heights, widths);
	cout<<"\n";
	for(i=0;i<heights.size();++i)
	cout<<heights[i]<<" ";
	cout<<"\n";
	for(i=0;i<widths.size();++i)
	cout<<widths[i]<<" ";
	cout<<"\n";
	for(i=0;i<n;++i)
	cout<<row[i]<<" ";
	cout<<"\n";
	for(i=0;i<m;++i)
	cout<<col[i]<<" ";

	
	return 0;
}



// see time complexity


1 To open an image

image_array = cv2.imread(image,0) // 0 for grayscale

2. convert grayscale to first adaptive and then simple binarise 
im_th = cv2.adaptiveThreshold(im,  255, cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,self.adaptive_thresh_value)
       
 
_,im_th = cv2.threshold(im_th,self.normal_thresh_value,255,cv2.THRESH_BINARY)
 
3. To resize an image and convert it to 784
im_th= cv2.resize(im_th,(28,28),interpolation=cv2.INTER_AREA)
im_th=im_th.ravel() 
Now image will be like 
[0,1,0,1,0,.......................... till 784]


Also there is no need to convert an array to image in opencv it internally does everything