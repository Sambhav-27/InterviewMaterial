/*because every number can only be divided by 2, 3, 5, one way to look at the sequence
is to split the sequence to three groups as below:
     (1) 1×2, 2×2, 3×2, 4×2, 5×2, …
     (2) 1×3, 2×3, 3×3, 4×3, 5×3, …
     (3) 1×5, 2×5, 3×5, 4×5, 5×5, …
    */
// 1, 2, 3, 4, 5.. thes are not natural numbers; these are first few ugly numbers
// then use merging to merge all ugly numbers

#include<bits/stdc++.h>
using namespace std;
#define N 100005
int ugly[N];
void find(){
    int i,j,k,l,c1,c2,c3;
    
    j=k=l=0;
    ugly[0]=1;
    c1= 2;
    c2= 3;
    c3= 5;
    for(i=1; i<1000; ++i){
        int x=min(c1, min(c2,c3));
        ugly[i]=x;
        
        if(x==c1){
            j++;
            c1= ugly[j]*2;
        }
        if(x==c2){ // else won't come ; two candidates can be equal
            k++;
            c2=ugly[k]*3;
        }
        if(x==c3){
            l++;
            c3=ugly[l]*5;
        }
    }
}

int main()
{
    find();
    int i,n,t;
    cin>>t;
    while(t--){
        cin>>n;
        cout<<ugly[n-1]<<"\n";
    }
    
	return 0;
}
