/*The structure of the class is
class MinHeap
{
    int *harr;
    int capacity;
    int heap_size;

public:
MinHeap(int cap=100) {heap_size = 0; capacity = cap; harr = new int[cap];}

    int extractMin();
    void deleteKey(int i);
    void insertKey(int k);
};*/

/* Removes min element from min heap and returns it */
// Decreases value of key at index 'i' to new_val.  It is assumed that
// new_val is smaller than harr[i].
/*void MinHeap::decreaseKey(int i, int new_val)
{
    harr[i] = new_val;
    while (i != 0 && harr[parent(i)] > harr[i])
    {
       swap(&harr[i], &harr[parent(i)]);
       i = parent(i);
    }
}*/

#define INF 1000000
void heapify(int a[], int n, int i){
    
    int small=i;
    if(a[2*i] < a[i] && 2*i<=n)
    small=2*i;
    if(a[2*i+1] < a[small] && 2*i+1<=n)
    small=2*i+1;
    if(small!=i){
        swap(a[i], a[small]);
        heapify(a, n, small);
    }
}
int MinHeap ::  extractMin()
{
    int i,j;
    if(heap_size < 1) return -1;
    j=harr[1];
    i=1;
    harr[1]=harr[heap_size--];
    
    heapify(harr, heap_size, 1);
    return j;
}

/* Removes element from position x in the min heap  */
void MinHeap :: deleteKey(int x) 
{
    x+=1; // x is according to 0 based indexing
    if(x>heap_size || x<1) return;
   
    harr[x]=-INF;
    int i=x;
    while(i>=1){
       if(harr[i/2] > harr[i] && i/2>=1){
           swap(harr[i/2], harr[i]);
           i=i/2;
       }
       else break;
   }
   extractMin();
    
}


void MinHeap ::insertKey(int val)
{ // 1 based indexing; heap_size points to last element

   int i=++heap_size; // don't use +=1, we need to update heap_size also
   harr[i]=val;
   
   while(i>=1){
       if(harr[i/2] > harr[i] && i/2 >=1){
           swap(harr[i/2], harr[i]);
           i=i/2;
       }
       else break;
   }
}


