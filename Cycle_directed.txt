

#define N 100005
bool visited[N];
bool recrstack[N];
int p[N],root;
bool dfs(int v, list<int> *&adj){
    visited[v]=recrstack[v]=1;
    
    list<int>::iterator i;
    for(i=adj[v].begin();i!=adj[v].end(); ++i){
        if(recrstack[*i]){
            p[*i]=v;
            root=*i;
            return 1;
        }
        if(!visited[*i]){
            p[*i]=v;
            if(dfs(*i, adj))
            return 1;
        }
    }
    recrstack[v]=0;
    return 0;
}
bool Graph :: isCyclic()
{
    int i,j,k,x;
    for(i=0;i<V;++i)
    visited[i]=recrstack[i]=0,p[i]=-1;
    root=-1;
    
    bool ans=0;
    for(i=0;i<V;++i){
        if(!visited[i]){
            if(dfs(i, adj)) ans=1;
        }
    }
    
    // j=root;
    // while(p[j]!=root){ // prints nodes of cycle in reverse order
    //     cout<<j<<" ";
    //     j=p[j];
    // }
    return ans;
}
