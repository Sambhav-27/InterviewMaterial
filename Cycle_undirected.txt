//If you encounter an already marked vertex, 
//there must be two different paths to reach it, 
//and in an undirected graph there must be a cycle. 
//If not, you can continue with the next connected component
//- no need to clean up the component you just finished.

//On the other hand, if you have a directed graph, 
//two different paths to the same vertex don't make a cycle.
//So you need a different algorithm 
//(for example, you may need to clean up any steps you back track.)

#define N 100005
bool visited[N];
bool recrstack[N];
int p[N],root;
bool dfs(int v, list<int> *&adj, int parent){
    visited[v]=1;
    
    list<int>::iterator i;
    for(i=adj[v].begin();i!=adj[v].end(); ++i){
        if(visited[*i] &&  *i!=parent){
            p[*i]=v;
            root=*i;
            return 1;
        }
        if(!visited[*i]){
            p[*i]=v;
            if(dfs(*i, adj, v))
            return 1;
        }
    }
    return 0;
}
bool Graph :: isCyclic()
{
    int i,j,k,x;
    for(i=0;i<V;++i)
    visited[i]=recrstack[i]=0,p[i]=-1;
    root=-1;
    
    bool ans=0;
    for(i=0;i<V;++i){
        if(!visited[i]){
            if(dfs(i, adj, -1)) ans=1;
        }
    }
    
    cout<<root<<" ";
    for(i=0;i<V;++i)
    cout<<p[i]<<":";
    //j=root;
    // while(p[j]!=root){ // prints nodes of cycle in reverse order
    //     cout<<j<<" ";
    //     j=p[j];
    // }
    return ans;
}
