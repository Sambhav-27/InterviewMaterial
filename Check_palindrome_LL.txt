// other approach would be to divide and reverse and then compare


bool check(Node **head1, Node *head2){
    if(!head2) return 1;
    bool x= check(&*head1, head2->next);
    if(!x) return 0;
    
    
    if(head2->data!=(*head1)->data)
    return 0;
    *head1=(*head1)->next;  // because of this statement pass by reference is necessary
    return 1;
}

bool isPalindrome(Node *head)
{
    // no need to divide the list is two halves. just check till end
    bool ans=check(&head, head);
    return ans;
}